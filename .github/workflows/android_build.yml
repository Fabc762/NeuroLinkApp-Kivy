# .github/workflows/android_build.yml

name: Android APK Build

on:
  push:
    branches:
      - main # Asegúrate de que esta sea tu rama principal (en tu caso, 'main')
  pull_request:
    branches:
      - main # Asegúrate de que esta sea tu rama principal (en tu caso, 'main')

jobs:
  build:
    runs-on: ubuntu-latest # Usamos un entorno Linux (Ubuntu)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Descarga tu código del repositorio

    - name: Set up Java Development Kit (JDK)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin' # Distribución de OpenJDK
        java-version: '17' # Versión de Java requerida para Android

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Usamos una versión estable de Python
      id: setup-python # Le damos un ID para acceder a su salida

    - name: Install Buildozer dependencies
      run: |
        sudo apt-get update
        # Añadido automake para complementar autoconf y libtool
        sudo apt-get install -y git zip unzip openjdk-17-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses-dev libffi-dev libssl-dev build-essential automake
      # Estas son las dependencias necesarias para Buildozer en Ubuntu

    - name: Upgrade pip and wheel
      run: |
        python3 -m pip install --upgrade pip wheel

    - name: Install Buildozer
      run: |
        # Usar python3 -m pip para asegurar que se use la instalación de Python correcta
        # Instalar buildozer, cython y setuptools explícitamente
        python3 -m pip install buildozer cython setuptools

    - name: Remove Buildozer Cache # Elimina la caché de Buildozer para asegurar una compilación limpia.
      run: |
        echo "Eliminando caché de Buildozer para asegurar una compilación limpia..."
        rm -rf .buildozer
      # Esto previene que archivos residuales de compilaciones anteriores causen problemas.

    # Los pasos "Install Android SDK Build-Tools via SDK Manager" y "Update Android SDK with Buildozer"
    # han sido eliminados. Ahora confiamos en que 'buildozer android debug' manejará
    # la descarga y configuración del SDK y NDK por sí mismo.

    - name: Build Android APK
      run: |
        # Añadido 'set -e' para que el workflow falle inmediatamente si un comando falla.
        set -e
        # Configuración de entorno Python para este paso
        PYTHON_BIN="${{ steps.setup-python.outputs.pythonLocation }}/bin/python3"
        sudo ln -sf "$PYTHON_BIN" /usr/local/bin/python || true
        export PYTHON="$PYTHON_BIN"
        echo "Iniciando compilación del APK. Buildozer gestionará la descarga del SDK/NDK."
        # Ejecutar Buildozer para compilar el APK.
        # Buildozer ahora se encargará de descargar y configurar el SDK/NDK y las build-tools.
        python -m buildozer android debug
      # Este comando iniciará la compilación del APK.

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: NeuroLinkApp-APK
        path: bin/*.apk
      # Sube el APK generado para que puedas descargarlo.
      # El APK estará en la carpeta 'bin' de tu proyecto.

