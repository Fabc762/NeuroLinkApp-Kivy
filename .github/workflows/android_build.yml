# .github/workflows/android_build.yml

name: Android APK Build

on:
  push:
    branches:
      - main # Asegúrate de que esta sea tu rama principal (en tu caso, 'main')
  pull_request:
    branches:
      - main # Asegúrate de que esta sea tu rama principal (en tu caso, 'main')

jobs:
  build:
    runs-on: ubuntu-latest # Usamos un entorno Linux (Ubuntu)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Descarga tu código del repositorio

    - name: Set up Java Development Kit (JDK)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin' # Distribución de OpenJDK
        java-version: '17' # Versión de Java requerida para Android

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Usamos una versión estable de Python
      id: setup-python # Le damos un ID para acceder a su salida

    - name: Install Buildozer dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses-dev libffi-dev libssl-dev build-essential
      # Estas son las dependencias necesarias para Buildozer en Ubuntu

    - name: Install Buildozer
      run: |
        # Usar python3 -m pip para asegurar que se use la instalación de Python correcta
        # Instalar buildozer, cython y setuptools explícitamente
        python3 -m pip install buildozer cython setuptools

    - name: Clean Buildozer Environment # <--- ¡NUEVO PASO!
      run: |
        # Obtener la ruta exacta del binario de Python instalado por setup-python
        PYTHON_BIN="${{ steps.setup-python.outputs.pythonLocation }}/bin/python3"
        # Crear un enlace simbólico para 'python' que apunte a la instalación específica de python3
        sudo ln -sf "$PYTHON_BIN" /usr/local/bin/python || true
        # Exportar la variable de entorno PYTHON para asegurar que Buildozer la encuentre.
        export PYTHON="$PYTHON_BIN"
        echo "Limpiando entorno de Buildozer..."
        python -m buildozer android clean
      # Limpia cualquier compilación anterior y dependencias descargadas.

    - name: Update Android SDK with Buildozer # <--- ¡NUEVO PASO!
      run: |
        # Obtener la ruta exacta del binario de Python instalado por setup-python
        PYTHON_BIN="${{ steps.setup-python.outputs.pythonLocation }}/bin/python3"
        # Crear un enlace simbólico para 'python' que apunte a la instalación específica de python3
        sudo ln -sf "$PYTHON_BIN" /usr/local/bin/python || true
        # Exportar la variable de entorno PYTHON para asegurar que Buildozer la encuentre.
        export PYTHON="$PYTHON_BIN"
        echo "Aceptando licencias del SDK de Android y actualizando..."
        # Aceptar las licencias del SDK de Android automáticamente y actualizar
        yes | python -m buildozer android update
      # Este paso asegura que el SDK esté instalado y las licencias aceptadas.

    - name: Build Android APK # <--- PASO SIMPLIFICADO
      run: |
        # Obtener la ruta exacta del binario de Python instalado por setup-python
        PYTHON_BIN="${{ steps.setup-python.outputs.pythonLocation }}/bin/python3"
        # Crear un enlace simbólico para 'python' que apunte a la instalación específica de python3
        sudo ln -sf "$PYTHON_BIN" /usr/local/bin/python || true
        # Exportar la variable de entorno PYTHON para asegurar que Buildozer la encuentre.
        export PYTHON="$PYTHON_BIN"
        echo "Iniciando compilación del APK..."
        # Ejecutar Buildozer para compilar el APK.
        python -m buildozer android debug
      # Este comando iniciará la compilación del APK.

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: NeuroLinkApp-APK
        path: bin/*.apk
      # Sube el APK generado para que puedas descargarlo.
      # El APK estará en la carpeta 'bin' de tu proyecto.
