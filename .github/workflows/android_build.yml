# .github/workflows/android_build.yml

name: Android APK Build

on:
  push:
    branches:
      - main # Asegúrate de que esta sea tu rama principal (en tu caso, 'main')
  pull_request:
    branches:
      - main # Asegúrate de que esta sea tu rama principal (en tu caso, 'main')

jobs:
  build:
    runs-on: ubuntu-latest # Usamos un entorno Linux (Ubuntu)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Descarga tu código del repositorio

    - name: Set up Java Development Kit (JDK)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin' # Distribución de OpenJDK
        java-version: '17' # Versión de Java requerida para Android

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Usamos una versión estable de Python
      id: setup-python # Le damos un ID para acceder a su salida

    - name: Install Buildozer dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses-dev libffi-dev libssl-dev build-essential
      # Estas son las dependencias necesarias para Buildozer en Ubuntu

    - name: Install Buildozer
      run: |
        # Usar python3 -m pip para asegurar que se use la instalación de Python correcta
        # Instalar buildozer, cython y setuptools explícitamente
        python3 -m pip install buildozer cython setuptools

    - name: Build Android APK
      run: |
        # Obtener la ruta exacta del binario de Python instalado por setup-python
        PYTHON_BIN="${{ steps.setup-python.outputs.pythonLocation }}/bin/python3"
        echo "Usando binario de Python: $PYTHON_BIN"

        # Crear un enlace simbólico para 'python' que apunte a la instalación específica de python3
        sudo ln -sf "$PYTHON_BIN" /usr/local/bin/python || true

        # Exportar la variable de entorno PYTHON para asegurar que Buildozer la encuentre.
        export PYTHON="$PYTHON_BIN"

        # Ejecutar Buildozer para que descargue el SDK/NDK y cree la estructura
        # Esto es crucial para que las build-tools existan antes de intentar añadirlas al PATH.
        # Primero, una limpieza para asegurar que Buildozer re-descargue si es necesario
        buildozer android clean

        # Ahora que Buildozer ha ejecutado 'clean' (que también puede inicializar estructuras),
        # podemos intentar encontrar las build-tools y añadirlas al PATH.
        ANDROID_SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
        echo "ANDROID_SDK_ROOT es $ANDROID_SDK_ROOT"

        # Encontrar la versión más reciente de build-tools (excluyendo RCs)
        # Se usa un wildcard para ser más flexible con la estructura de directorios
        BUILD_TOOLS_PATH=$(find "$ANDROID_SDK_ROOT/build-tools" -maxdepth 2 -type d \
            -name "*" | grep -v -- "-rc" | sort -V | tail -n 1)

        if [ -d "$BUILD_TOOLS_PATH" ]; then
          echo "Añadiendo Android Build-Tools a PATH: $BUILD_TOOLS_PATH"
          echo "$BUILD_TOOLS_PATH" >> $GITHUB_PATH # Añade la ruta al PATH para los siguientes comandos
        else
          echo "Error: Directorio de Android Build-Tools no encontrado después de buildozer android clean en $BUILD_TOOLS_PATH."
          exit 1 # Fallar la tarea si las build-tools no se encuentran
        fi

        # Finalmente, ejecutar la compilación de Buildozer
        python -m buildozer android debug
      # Este comando iniciará la compilación del APK.
      # La primera vez descargará el SDK/NDK, lo que puede tardar.

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: NeuroLinkApp-APK
        path: bin/*.apk
      # Sube el APK generado para que puedas descargarlo.
      # El APK estará en la carpeta 'bin' de tu proyecto.
