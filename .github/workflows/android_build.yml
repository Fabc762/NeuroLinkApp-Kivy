# .github/workflows/android_build.yml

name: Android AAB Build

on:
  push:
    branches:
      - main # Asegúrate de que esta sea tu rama principal (en tu caso, 'main')
  pull_request:
    branches:
      - main # Asegúrate de que esta sea tu rama principal (en tu caso, 'main')

jobs:
  build:
    runs-on: ubuntu-latest # Usamos un entorno Linux (Ubuntu)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Descarga tu código del repositorio

    - name: Set up Java Development Kit (JDK)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin' # Distribución de OpenJDK
        java-version: '17' # Versión de Java requerida para Android

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Usamos una versión estable de Python
      id: setup-python # Le damos un ID para acceder a su salida

    - name: Install Buildozer dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses-dev libffi-dev libssl-dev build-essential automake
      # Estas son las dependencias necesarias para Buildozer en Ubuntu

    - name: Upgrade pip and wheel
      run: |
        python3 -m pip install --upgrade pip wheel

    - name: Install Buildozer
      run: |
        python3 -m pip install buildozer cython setuptools

    - name: Remove Buildozer Cache
      run: |
        echo "Eliminando caché de Buildozer para asegurar una compilación limpia..."
        rm -rf .buildozer
      # Esto previene que archivos residuales de compilaciones anteriores causen problemas.

    - name: Build Android AAB
      run: |
        set -e
        PYTHON_BIN="${{ steps.setup-python.outputs.pythonLocation }}/bin/python3"
        sudo ln -sf "$PYTHON_BIN" /usr/local/bin/python || true
        export PYTHON="$PYTHON_BIN"
        echo "Iniciando compilación del AAB. Buildozer gestionará la descarga del SDK/NDK."
        # Ejecutar Buildozer para compilar el AAB en modo release.
        # Buildozer se encargará de descargar y configurar el SDK/NDK y las build-tools.
        # Asegúrate de que tu buildozer.spec tenga 'android.release = true' y 'android.enable_aab = true'
        # y que hayas configurado tu keystore.
        python -m buildozer android release
      # Este comando iniciará la compilación del AAB.

    - name: Upload AAB artifact
      uses: actions/upload-artifact@v4
      with:
        name: NeuroLinkApp-AAB
        path: bin/*.aab
      # Sube el AAB generado para que puedas descargarlo.
      # El AAB estará en la carpeta 'bin' de tu proyecto.
